- name: create directories for {{ pipeline }} singularity images
  file:
    path: "{{ container_dir }}"
    state: directory

- name: Create temp directories for singularity images
  file:
    path: "{{ cachedir }}"
    state: directory
  with_items:
    - "{{ nf_core_vars.SINGULARITY_CACHEDIR }}"
    - "{{ nf_core_vars.SINGULARITY_TMPDIR }}"
  loop_control:
    loop_var: cachedir

- name: nf-core download {{ pipeline }} v{{ release }}
  command: "nf-core -v
    download {{ pipeline }}
    --compress none
    --outdir {{ sw_path }}/{{ pipeline }}
    --revision {{ release }}
    --container singularity
    --singularity-cache-only"
  environment: "{{ nf_core_vars }}"
  args:
    chdir: "{{ sw_path }}"
    creates: "{{ sw_path }}/{{ pipeline }}"

- name: pull pipeline-specific images for {{ pipeline }} v{{ release }}
  command: "singularity pull --name nf-core-{{ container.0 }}-{{ release }}.{{ container.1 }}.simg {{ nf_core_container_repo }}/{{ container.0 }}:{{ release }}.{{ container.1 }}"
  environment: "{{ nf_core_vars }}"
  args:
    chdir: "{{ container_dir }}"
    creates: "{{ container_dir }}/nf-core-{{ container.0 }}-{{ release }}.{{ container.1 }}.simg"
  ignore_errors: true
  with_nested:
    - "{{ pipeline_specific_containers }}"
    - "{{ pipeline_genomes }}"
  loop_control:
    loop_var: container

- name: create nf-core {{ pipeline }} v{{ release }} config
  template:
    src: "site.config.j2"
    dest: "{{ ngi_pipeline_conf }}/{{ pipeline }}_{{ site }}.config"

- name: set alias for pipeline {{ pipeline }} v{{ release }}
  lineinfile:
    dest: "{{ ngi_pipeline_conf }}/{{ bash_env_script }}"
    line: >
      alias {{ pipeline }}='nextflow run {{ sw_path }}/{{ pipeline }}/workflow/ \
      --custom_config_base {{ sw_path }}/{{ pipeline }}/configs/ \
      -profile uppmax \
      -c {{ ngi_pipeline_conf }}/nextflow_miarka_{{ site }}.config \
      -c {{ ngi_pipeline_conf }}/{{ pipeline }}_{{ site }}.config'
    backup: no

- name: download sarek additional images
  import_tasks: sarek_specific.yml
  when: pipeline == "sarek"

- name: download ampliseq requirements
  block:
    - name: create directory for {{ pipeline }}  resources
      file:
        path: "{{ ngi_containers }}/{{ pipeline }}"
        state: directory

    - name: check if SILVA zip exists
      stat:
        get_attributes: no
        get_checksum: no
        get_mime: no
        path: "{{ ngi_containers }}/{{ pipeline }}/{{ silva_zip }}"
      register: silva_stat

    - name: download SILVA classifier data
      get_url:
        url: "{{ silva_base_url }}/{{ silva_zip }}"
        dest: "{{ ngi_containers }}/{{ pipeline }}/{{ silva_zip }}"
      when: not silva_stat.stat.exists
  when: pipeline == "ampliseq"

- name: Remove singularity cache directories
  file:
    name: "{{ cachedir }}"
    state: absent
  with_items:
    - "{{ nf_core_vars.SINGULARITY_CACHEDIR }}"
    - "{{ nf_core_vars.SINGULARITY_TMPDIR }}"
  loop_control:
    loop_var: cachedir

- name: store {{ pipeline }} version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "{{ pipeline }}: {{ release }}"
